# database init, supports mysql too
database=mysql
#spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost/petclinic}
#spring.datasource.username=${MYSQL_USER:petclinic}
#spring.datasource.password=${MYSQL_PASS:petclinic}
spring.cloud.gcp.sql.database-name=<your cloud sql DB name, not the instance name>
#The following is in the format of project-id:zone-id:instance-id. This can be gotten by running: gcloud sql instances describe <your-db-instance-name> | grep connectionName
spring.cloud.gcp.sql.instance-connection-name=
#spring.datasource.username=
spring.datasource.password=<put your password here>
#The following is not required if your app is running on GCP or cloudshell as it by default gets the auth details. If it's not running on these, we need to create a service account from IAM, generate its private key & provide that private key in here
spring.cloud.gcp.credentials.location=
# SQL is written to be idempotent so this is safe
spring.sql.init.mode=always
